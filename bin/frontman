#!/usr/bin/env node

// node
var path			= require('path');
var fs = require('fs');
var mkdirp = require('mkdirp');

var program  = require('autocmdr');

// autocmdr plugins
require('autocmdr/lib/logger.js')(program);
require('autocmdr/lib/package.js')(program);
require('autocmdr/lib/config.js')(program);

// Local
var frontman = require('../lib/frontman.js');

program
	.usage('[options] filename')
	.option('-t, --template <file>', 'Path to template file')
	.option('-r, --replace', 'Indicate that the template should replace the base')
	// --outfmt <format>     The format of the output data. See 'help formats'
	// -d, --data <JSON>     Input data provided in lieu of a filename
	//--color               Colorize output
	.option('-j, --to-json', 'Output JSON')
	.option('-c, --to-cson', 'Output CSON')
	.option('-y, --to-yaml', 'Output YAML')
	.option('-o, --output <path>', 'Output directory or file.  If not specified, defaults to stdout.')
	;

program
	.on('*', function() {   // TODO* Move this

		var files = program.args;  // TODO: glob each?

		if (files.length < 1 ) // TODO: fix this
			program.outputHelp();

		if (program.template)  // Read template once, but don't process yet
			var template = frontman._readFile( path.join(process.cwd(), program.template));

		files.forEach(function(filename) {  // TODO: Move this to lib?
			//console.log(filename);
			var infile = path.join(process.cwd(), filename);

			if (filename != '-') {
				var source = frontman._readFile( infile );  // If file not found, assume new file
			} else {
				var source = {};  // TODO: Stdin
			}

			var resultObject = frontman._process(source, template, program);
			//console.log(resultObject);

			var _opts = {};
			if (program.toJson) _opts.type = "json";
			if (program.toCson) _opts.type = "cson";
			if (program.toYaml) _opts.type = "yml";

			if (program.output) {

				var outpath = path.join(process.cwd(), program.output);

				var isDir = outpath[outpath.length-1] == '\\' || outpath[outpath.length-1] == '/';  // TODO: Need a better method
				isDir = isDir || fs.statSync(outpath).isDirectory();

				if (isDir) {
					outpath = path.join(outpath, resultObject.__outputdir || "", resultObject.__basename);
				}

				// flatten?
				// Change extension?

				program.log.info('Writing ', outpath);

				var result = frontman.stringify(resultObject, _opts.type );

				mkdirp.sync(path.dirname(outpath));

				fs.writeFile(outpath, result, function (err) {
				  if (err) throw err;
				  console.log('It\'s saved!');
				});

			} else {
				var result = frontman.stringify(resultObject, _opts.type );	
				console.log(result);
			}

		});

	});

program.parse(process.argv);

if (program.args.length < 1 )
	program.outputHelp();

