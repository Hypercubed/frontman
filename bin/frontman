#!/usr/bin/env node

// node
var path			= require('path');
var fs = require('fs');
var mkdirp = require('mkdirp');

var program  = require('autocmdr');

// autocmdr plugins
require('autocmdr/lib/logger.js')(program);
require('autocmdr/lib/package.js')(program);

// Local
var frontman = require('../lib/frontman.js');

program
	.usage('[options] filename')
	.option('-t, --template <file>', 'Path to template file')
	.option('-r, --replace', 'Indicate that the template should replace the base')
	// --outfmt <format>     The format of the output data. See 'help formats'
	// -d, --data <JSON>     Input data provided in lieu of a filename
	//--color               Colorize output
	.option('-j, --to-json', 'Output JSON')
	.option('-c, --to-cson', 'Output CSON')
	.option('-y, --to-yaml', 'Output YAML')
	.option('-o, --output <path>', 'Output directory or file.  If not specified, defaults to stdout.')
	.parse(process.argv);

var files = program.args;  // TODO: glob each?

if (files.length < 1 ) // TODO: fix this
	frontman.render({}, program);

if (program.template)  // Read template once, but don't process yet
	var template = frontman._readFile( path.join(process.cwd(), program.template));

files.forEach(function(filename) {  // TODO: Move this to lib?
	//console.log(filename);
	var infile = path.join(process.cwd(), filename);

	var source = frontman._readFile( infile );

	var resultObject = frontman._process(source, template, program);

	var _opts = {};
	if (program.toJson) _opts.type = "json";
	if (program.toCson) _opts.type = "cson";
	if (program.toYaml) _opts.type = "yml";

	var result = frontman.stringify(resultObject, _opts.type );	

	//console.log(result);

	if (program.output) {

		var outpath = path.join(process.cwd(), program.output);

		var isDir = outpath[outpath.length-1] == '\\' || outpath[outpath.length-1] == '/';  // TODO: Need a better method
		isDir = isDir || fs.statSync(outpath).isDirectory();

		var basename = path.basename(infile);

		if (isDir) {
			mkdirp.sync(outpath);
			outpath = path.join(outpath, basename);
		}

		// flatten?
		// Change extension

		program.logger.info('Writing ', outpath);

	} else {
		console.log(result);
	}

});

